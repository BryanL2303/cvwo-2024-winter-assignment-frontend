{"version":3,"file":"static/js/171.34610bc2.chunk.js","mappings":"kPA2FA,QAtEA,SAAsBA,GAAsC,IAArC,GAAEC,EAAE,QAAEC,GAA4BF,EACrD,MAAOG,IAAWC,EAAAA,EAAAA,GAAW,CAAC,WAGvBC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GA8CzC,OAAQC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACJD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UACEL,IAAYK,EAAAA,EAAAA,KAACC,EAAAA,QAAM,CAACC,QAASA,KAAON,GAAY,EAAK,EAAEG,SAAC,oBAE7DJ,IAAYG,EAAAA,EAAAA,MAAA,QAAMK,UAAU,6DAA6DC,SAnC9F,SAAqBC,GACjBA,EAAEC,iBAEF,MAAMd,EAAUa,EAAEE,cAAc,IAnCxC,SAAkCC,GAE9B,KAAM,UAAWA,GACb,MAAM,IAAIC,MAAM,sCAExB,CA+BQC,CAAyBlB,GAEzB,MAAMmB,EAAU,CACZpB,GAAIA,EACJqB,MAAOnB,EAAQmB,MACfC,QAASrB,EAAQsB,OAGrBC,EAAAA,EAAMC,KAAK,kBAAmBL,GAC7BM,MAAKC,IACuB,IAArBA,EAAKC,KAAKC,QACVC,MAAM,kBACNC,OAAOC,SAASC,KAAO,SAAWN,EAAKC,KAAKH,KAAKzB,IACrB,IAArB2B,EAAKC,KAAKC,OACjBC,MAAM,wCAEFH,EAAKC,KAAKM,MAAMjC,QAAQkC,OAAS,EACjCL,MAAM,WAAaH,EAAKC,KAAKM,MAAMjC,SAEnC6B,MAAM,yEAEd,IAEHM,OAAMT,GAAQU,QAAQC,IAAIX,IAC/B,EAOoHnB,SAAA,EAE5GD,EAAAA,EAAAA,MAAA,MAAIK,UAAU,YAAWJ,SAAA,EAACC,EAAAA,EAAAA,KAACC,EAAAA,QAAM,CAAC6B,KAAK,SAAS5B,QAASA,KAAON,GAAY,EAAM,EAAEG,UAACC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAS,MAAW,oBAC1G/B,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SAAOG,UAAU,SAAQJ,SAAC,eAC1BC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,YAAUG,UAAU,yCAAyC6B,MAAO,CAACC,OAAQ,QAASC,aAAc1C,KACnG,GACDQ,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACC,EAAAA,QAAM,CAACE,UAAU,WAAW6B,MAAO,CAACG,UAAU,oBAAqBpC,SAAC,mBAGjF,C","sources":["components/CommentEditor.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport { ArrowLeft } from 'lucide-react';\r\n\r\n//import  { SelectedCategoryContext } from '../context/SelectedCategoryContext'\r\n//import  { CategoriesContext } from '../context/CategoriesContext'\r\nimport Button from './Button';\r\n\r\nfunction assertIsFormFieldElement(element: Element): asserts element is HTMLInputElement | HTMLSelectElement | HTMLButtonElement {\r\n    // Customize this list as necessary −−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    if (!(\"value\" in element)) {\r\n        throw new Error(`Element is not a form field element`);\r\n    }\r\n}\r\n\r\ntype CommentEditorProp = {\r\n    id: string,\r\n    comment: string,\r\n}\r\n\r\nfunction CommentEditor({ id, comment }: CommentEditorProp) {\r\n    const [cookies] = useCookies(['token']);\r\n    //const [categories, setCategories] = useContext(CategoriesContext)\r\n    //const [selectedCategory, setSelectedCategory] = useContext(SelectedCategoryContext)\r\n    const [showForm, setShowForm] = useState(false);\r\n    /**\r\n     * Log in with an existing account\r\n     * @param e Form inputs\r\n     * \r\n     * Posts to the backend with payload:\r\n     * username: string\r\n     * password: string\r\n     * \r\n     * Backend should respond with status:\r\n     * 0 - success\r\n     * 1 - token is not authorized\r\n     * 2 - problem with database\r\n     * \r\n     * On success set cookie with JWT generated by backend\r\n     */\r\n    function editComment(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        //Element 0 is the button to go back\r\n        const comment = e.currentTarget[1];\r\n        assertIsFormFieldElement(comment);\r\n\r\n        const payload = {\r\n            id: id,\r\n            token: cookies.token,\r\n            updates: comment.value,\r\n        }\r\n\r\n        axios.post('/update_comment', payload)\r\n        .then(resp => {\r\n            if (resp.data.status === 0) {\r\n                alert(\"Comment saved!\")\r\n                window.location.href = \"/post/\" + resp.data.post.id\r\n            } else if (resp.data.status === 1) {\r\n                alert(\"Please relog in before trying again.\")\r\n            } else {\r\n                if (resp.data.error.comment.length > 0) {\r\n                    alert(\"Comment \" + resp.data.error.comment)\r\n                } else {\r\n                    alert(\"An unexpected error has occured, please refresh the page and try again\")\r\n                }\r\n            }\r\n        })\r\n        .catch(resp => console.log(resp))\r\n    }\r\n\r\n    return (<div>\r\n        <div>\r\n            <br/>\r\n            {!showForm && <Button onClick={() => {setShowForm(true)}}>Edit Comment</Button>}\r\n        </div>\r\n        {showForm && <form className=\"z-40 h-full w-full absolute top-0 left-0 bg-gray-100 mx-20\" onSubmit={editComment}>\r\n            \r\n            <h1 className=\"font-bold\"><Button type=\"button\" onClick={() => {setShowForm(false)}}><ArrowLeft/></Button> Editing Post</h1>\r\n            <br/>\r\n            <br/>\r\n            <label className=\"w-auto\">Comment: </label>\r\n            <br/>\r\n            <textarea className=\"border border-slate-400 w-3/4 h-40 p-1\" style={{resize: \"none\"}} defaultValue={comment}></textarea>\r\n            {false && <input type='text' className=\"border border-slate-400\" />}\r\n            <br/>\r\n            <Button className=\"self-end\" style={{transform: `translateX(65vw)`}}>Save Edit</Button>\r\n        </form>}\r\n    </div>)\r\n}\r\n\r\nexport default CommentEditor;"],"names":["_ref","id","comment","cookies","useCookies","showForm","setShowForm","useState","_jsxs","children","_jsx","Button","onClick","className","onSubmit","e","preventDefault","currentTarget","element","Error","assertIsFormFieldElement","payload","token","updates","value","axios","post","then","resp","data","status","alert","window","location","href","error","length","catch","console","log","type","ArrowLeft","style","resize","defaultValue","transform"],"sourceRoot":""}