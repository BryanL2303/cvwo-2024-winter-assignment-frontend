{"version":3,"file":"static/js/812.b6df05c7.chunk.js","mappings":"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","sources":["components/PostEditor.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport { ArrowLeft } from 'lucide-react';\r\n\r\n//import  { SelectedCategoryContext } from '../context/SelectedCategoryContext'\r\nimport  { CategoriesContext } from '../context/CategoriesContext'\r\nimport Button from './Button';\r\n\r\nfunction assertIsFormFieldElement(element: Element): asserts element is HTMLInputElement | HTMLSelectElement | HTMLButtonElement {\r\n    // Customize this list as necessary −−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    if (!(\"value\" in element)) {\r\n        throw new Error(`Element is not a form field element`);\r\n    }\r\n}\r\n\r\nfunction assertIsSelectElement(element: Element): asserts element is HTMLSelectElement {\r\n    // Customize this list as necessary −−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    if (!(\"value\" in element)) {\r\n        throw new Error(`Element is not a form field element`);\r\n    }\r\n}\r\n\r\n//type post = \r\n\r\ntype PostProp = {\r\n    post: {\r\n        id: string,\r\n        title: string,\r\n        description: string,\r\n        author: string,\r\n        date: string,\r\n        labels: string[],\r\n    },\r\n}\r\n\r\nfunction PostEditor({ post }: PostProp) {\r\n    const [cookies] = useCookies(['token']);\r\n    const [categories] = useContext(CategoriesContext)\r\n    //const [selectedCategory, setSelectedCategory] = useContext(SelectedCategoryContext)\r\n    const [showForm, setShowForm] = useState(false);\r\n\r\n    console.log(post)\r\n    /**\r\n     * Log in with an existing account\r\n     * @param e Form inputs\r\n     * \r\n     * Posts to the backend with payload:\r\n     * username: string\r\n     * password: string\r\n     * \r\n     * Backend should respond with status:\r\n     * 0 - success\r\n     * 1 - token is not authorized\r\n     * 2 - problem with database\r\n     * \r\n     * On success set cookie with JWT generated by backend\r\n     */\r\n    function editPost(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        //Element 0 is the button to go back\r\n        const title = e.currentTarget[1];\r\n        const label = e.currentTarget[2];\r\n        const description = e.currentTarget[3];\r\n        assertIsFormFieldElement(title);\r\n        assertIsSelectElement(label);\r\n        assertIsFormFieldElement(description);\r\n\r\n        var labels: string[] = []\r\n\r\n        for (let i = 0; i < label.selectedOptions.length; i++) {\r\n            labels = [...labels, label.selectedOptions[i].id]\r\n        }\r\n\r\n        const payload = {\r\n            id: post.id,\r\n            token: cookies.token,\r\n            title: title.value,\r\n            labels: labels,\r\n            description: description.value,\r\n        }\r\n\r\n        axios.post('/update_post', payload)\r\n        .then(resp => {\r\n            if (resp.data.status === 0) {\r\n                alert(\"Post saved!\")\r\n                window.location.href = \"/post/\" + resp.data.post.id\r\n            } else if (resp.data.status === 1) {\r\n                alert(\"Please relog in before trying again.\")\r\n            } else {\r\n                if (resp.data.error.title.length === 0) {\r\n                    alert(\"An unexpected error has occured, please refresh the page and try again\")\r\n                } else {\r\n                    let alertMessage = \"\"\r\n                    if (resp.data.error.title.length > 0) {\r\n                        alertMessage += \"Post title \" + resp.data.error.title + \"\\n\"\r\n                    }\r\n                    alert(alertMessage)\r\n                }\r\n            }\r\n        })\r\n        .catch(resp => console.log(resp))\r\n    }\r\n\r\n    return (<div>\r\n        <div>\r\n            <br/>\r\n            {!showForm && <Button onClick={() => {setShowForm(true)}}>Edit Post</Button>}\r\n        </div>\r\n        {showForm && <form className=\"z-40 h-full w-full absolute top-0 left-0 bg-gray-100 mx-20\" onSubmit={editPost}>\r\n            \r\n            <h1 className=\"font-bold\"><Button type=\"button\" onClick={() => {setShowForm(false)}}><ArrowLeft/></Button> Editing Post</h1>\r\n            <br/>\r\n            <br/>\r\n            <label className=\"w-auto\">Title: </label>\r\n            <input type='text' className=\"border border-slate-400\" defaultValue={post.title} />\r\n            <br/>\r\n            <br/>\r\n            <label>Categories: </label>\r\n            <select multiple={true} className=\"flex\" defaultValue={post.labels}>\r\n                {categories.map((category) => {\r\n                    return (<option key={category.id} id={category.id} value={category.id}>{category.label_name}</option>)\r\n                })}\r\n            </select>\r\n            <br/>\r\n            <label className=\"w-auto\">Post: </label>\r\n            <br/>\r\n            <textarea className=\"border border-slate-400 w-3/4 h-40 p-1\" style={{resize: \"none\"}} defaultValue={post.description}></textarea>\r\n            {false && <input type='text' className=\"border border-slate-400\" />}\r\n            <br/>\r\n            <Button className=\"self-end\" style={{transform: `translateX(65vw)`}}>Save Edit</Button>\r\n        </form>}\r\n    </div>)\r\n}\r\n\r\nexport default PostEditor;"],"names":["assertIsFormFieldElement","element","Error","_ref","post","cookies","useCookies","categories","useContext","CategoriesContext","showForm","setShowForm","useState","console","log","_jsxs","children","_jsx","Button","onClick","className","onSubmit","e","preventDefault","title","currentTarget","label","description","assertIsSelectElement","labels","i","selectedOptions","length","id","payload","token","value","axios","then","resp","data","status","alert","window","location","href","error","alertMessage","catch","type","ArrowLeft","defaultValue","multiple","map","category","label_name","style","resize","transform"],"sourceRoot":""}